// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shrooms.DataLayer.DAL;

namespace Shrooms.DataLayer.Migrations
{
    [DbContext(typeof(ShroomsDbContext))]
    partial class ShroomsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoleClaims");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId")
                        .HasName("IX_UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("UserId");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasAlternateKey("LoginProvider", "ProviderKey")
                        .HasName("Temporary");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PK_dbo.AspNetUserTokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.AbstractClassifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificatorType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasDefaultValue("");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("ParentId");

                    b.Property<string>("SortOrder");

                    b.Property<string>("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Classificators");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ParentId")
                        .HasName("IX_ParentId");

                    b.ToTable("AbstractClassifiers");

                    b.HasDiscriminator<string>("ClassificatorType").HasValue("AbstractClassifier");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("IX_NormalizedName")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId", "Name")
                        .HasName("IX_OrganizationId_Name")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("AbsentComment");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bio");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CultureCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("en-US");

                    b.Property<TimeSpan?>("DailyMailingHour");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FacebookEmail");

                    b.Property<string>("FirstName");

                    b.Property<string>("GoogleEmail");

                    b.Property<bool>("IsAbsent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAnonymized")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsManagingDirector")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOwner")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTutorialComplete")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("JobPositionId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("ManagerId");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureId");

                    b.Property<int?>("QualificationLevelId");

                    b.Property<decimal>("RemainingKudos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int?>("RoomId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("SittingPlacesChanged")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal>("SpentKudos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("FLE Standard Time");

                    b.Property<decimal>("TotalKudos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime?>("VacationLastTimeUpdated")
                        .HasColumnType("datetime");

                    b.Property<double?>("VacationTotalTime");

                    b.Property<double?>("VacationUnusedTime");

                    b.Property<double?>("VacationUsedTime");

                    b.Property<int?>("WorkingHoursId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("Email")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("JobPositionId")
                        .HasName("IX_JobPositionId");

                    b.HasIndex("ManagerId")
                        .HasName("IX_ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("IX_NormalizedEmail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("IX_NormalizedUserName")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("QualificationLevelId")
                        .HasName("IX_QualificationLevelId");

                    b.HasIndex("RoomId")
                        .HasName("IX_RoomId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BadgeCategories");

                    b.ToTable("BadgeCategories");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeCategoryKudosType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeCategoryId");

                    b.Property<int>("CalculationPolicyType");

                    b.Property<int>("KudosTypeId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BadgeCategoryKudosType");

                    b.HasIndex("BadgeCategoryId")
                        .HasName("IX_BadgeCategoryId");

                    b.HasIndex("KudosTypeId")
                        .HasName("IX_KudosTypeId");

                    b.ToTable("BadgeCategoryKudosType");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("BadgeTypeId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("EmployeeId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BadgeLogs");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BadgeTypeId")
                        .HasName("IX_BadgeTypeId");

                    b.HasIndex("EmployeeId")
                        .HasName("IX_EmployeeId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId");

                    b.ToTable("BadgeLogs");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeCategoryId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("ImageSmallUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.Property<int>("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BadgeTypes");

                    b.HasIndex("BadgeCategoryId")
                        .HasName("IX_BadgeCategoryId");

                    b.ToTable("BadgeTypes");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.BlacklistUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Reason");

                    b.Property<int>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.BlacklistUsers");

                    b.HasIndex("CreatedBy")
                        .HasName("IX_CreatedBy")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ModifiedBy")
                        .HasName("IX_ModifiedBy")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId")
                        .HasName("IX_UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("BlacklistUsers");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("BookCoverUrl");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasMaxLength(9000);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Url")
                        .HasMaxLength(2000);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Books");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.BookLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<int>("BookOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("Returned")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TakenFrom")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BookLogs");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BookOfficeId")
                        .HasName("IX_BookOfficeId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("BookLogs");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.BookOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<int>("OfficeId");

                    b.Property<int?>("OfficeId1");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BookOffice");

                    b.HasIndex("OfficeId")
                        .HasName("IX_OfficeId");

                    b.HasIndex("OfficeId1");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BookId", "OfficeId")
                        .IsUnique()
                        .HasName("BookId_OfficeId");

                    b.ToTable("BookOffice");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsKudosCommittee")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<string>("Website");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Committees");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteeSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommitteeId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.Property<string>("User_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CommitteeSuggestion");

                    b.HasIndex("CommitteeId")
                        .HasName("IX_CommitteeId");

                    b.HasIndex("User_Id")
                        .HasName("IX_User_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CommitteeSuggestion");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteeSuggestionID", b =>
                {
                    b.Property<int>("CommitteeId")
                        .HasColumnName("Committees_Id");

                    b.Property<int>("CommitteeSuggestionId")
                        .HasColumnName("CommitteeSuggestions_Id");

                    b.HasKey("CommitteeId", "CommitteeSuggestionId")
                        .HasName("PK_dbo.CommitteeSuggestionsIDs");

                    b.HasIndex("CommitteeId")
                        .HasName("IX_Committees_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CommitteeSuggestionId")
                        .HasName("IX_CommitteeSuggestions_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CommitteeSuggestionsIDs");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserDelegates", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("ApplicationUser_Id");

                    b.Property<int>("CommitteeId")
                        .HasColumnName("Committee_Id");

                    b.HasKey("ApplicationUserId", "CommitteeId")
                        .HasName("PK_dbo.CommitteesUsersDelegates");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CommitteeId")
                        .HasName("IX_Committee_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CommitteesUsersDelegates");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserLeadership", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("ApplicationUser_Id");

                    b.Property<int>("CommitteeId")
                        .HasColumnName("Committee_Id");

                    b.HasKey("ApplicationUserId", "CommitteeId")
                        .HasName("PK_dbo.CommitteesUsersLeadership");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CommitteeId")
                        .HasName("IX_Committee_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CommitteesUsersLeadership");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserMembership", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("ApplicationUser_Id");

                    b.Property<int>("CommitteeId")
                        .HasColumnName("Committee_Id");

                    b.HasKey("ApplicationUserId", "CommitteeId")
                        .HasName("PK_dbo.CommitteesUsersMembership");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CommitteeId")
                        .HasName("IX_Committee_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CommitteesUsersMembership");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("AllowMaybeGoing")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowNotGoing")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("EventRecurring")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("EventTypeId");

                    b.Property<string>("ImageName");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned");

                    b.Property<int>("MaxChoices")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32767)
                        .HasDefaultValue(0);

                    b.Property<int>("MaxParticipants")
                        .HasMaxLength(32767);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Offices")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Place")
                        .IsRequired();

                    b.Property<DateTime>("RegistrationDeadline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2016, 5, 11, 11, 57, 2, 755, DateTimeKind.Local));

                    b.Property<string>("ResponsibleUserId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WallId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Events");

                    b.HasIndex("EndDate")
                        .HasName("ix_end_date")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventTypeId")
                        .HasName("IX_EventTypeId");

                    b.HasIndex("OfficeId")
                        .HasName("IX_OfficeId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId");

                    b.HasIndex("ResponsibleUserId")
                        .HasName("IX_ResponsibleUserId");

                    b.HasIndex("StartDate")
                        .HasName("ix_start_date")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WallId")
                        .HasName("IX_WallId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Option")
                        .IsRequired();

                    b.Property<int>("Rule")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_dbo.EventOptions");

                    b.HasIndex("EventId")
                        .HasName("IX_EventId");

                    b.ToTable("EventOptions");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("AttendComment");

                    b.Property<int>("AttendStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.HasKey("Id")
                        .HasName("PK_dbo.EventsParticipants");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId");

                    b.HasIndex("EventId")
                        .HasName("IX_EventId");

                    b.HasIndex("IsDeleted")
                        .HasName("nci_wi_EventParticipants_CA1F6B4699FAB2347B166CEA9639C7E8")
                        .HasAnnotation("SqlServer:Clustered", false)
                        .HasAnnotation("SqlServer:Include", new[] { "EventId" });

                    b.ToTable("EventsParticipants");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventParticipantEventOption", b =>
                {
                    b.Property<int>("EventParticipantId")
                        .HasColumnName("EventParticipant_Id");

                    b.Property<int>("EventOptionId")
                        .HasColumnName("EventOption_Id");

                    b.HasKey("EventParticipantId", "EventOptionId")
                        .HasName("PK_dbo.EventParticipantEventOptions");

                    b.HasIndex("EventOptionId")
                        .HasName("IX_EventOption_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventParticipantId")
                        .HasName("IX_EventParticipant_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("EventParticipantEventOptions");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShownWithMainEvents")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSingleJoin");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("SendEmailToManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("SendWeeklyReminders")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("SingleJoinGroupName")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_dbo.EventTypes");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Number")
                        .HasMaxLength(255);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Exams");

                    b.HasIndex("Number")
                        .HasName("IX_Number")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Title")
                        .HasName("IX_Title")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ExamCertificate", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnName("Exam_Id");

                    b.Property<int>("CertificateId")
                        .HasColumnName("Certificate_Id");

                    b.HasKey("ExamId", "CertificateId")
                        .HasName("PK_dbo.ExamCertificates");

                    b.HasIndex("CertificateId")
                        .HasName("IX_Certificate_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ExamId")
                        .HasName("IX_Exam_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ExamCertificates");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.ExternalLinks");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.FilterPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("ForPage");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Preset")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.FilterPresets");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("FilterPresets");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int?>("OfficeId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<int?>("Picture_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Floors");

                    b.HasIndex("OfficeId")
                        .HasName("IX_OfficeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Picture_Id")
                        .HasName("IX_Picture_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.JobPosition");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("JobPosition");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("EmployeeId");

                    b.Property<int?>("KudosBasketId");

                    b.Property<int>("KudosSystemType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("KudosTypeName");

                    b.Property<decimal>("KudosTypeValue");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("MultiplyBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<decimal>("Points");

                    b.Property<string>("RejectionMessage");

                    b.Property<int>("Status");

                    b.HasKey("Id")
                        .HasName("PK_dbo.KudosLogs");

                    b.HasIndex("EmployeeId")
                        .HasName("IX_EmployeeId");

                    b.HasIndex("KudosBasketId")
                        .HasName("IX_KudosBasketId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("KudosLogs");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<int>("Price");

                    b.HasKey("Id")
                        .HasName("PK_dbo.KudosShopItems");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("KudosShopItems");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal>("Value");

                    b.HasKey("Id")
                        .HasName("PK_dbo.KudosTypes");

                    b.ToTable("KudosTypes");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.KudosBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id")
                        .HasName("PK_dbo.KudosBaskets");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("KudosBaskets");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Lotteries.Lottery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EntryFee");

                    b.Property<int>("GiftedTicketLimit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsRefundFailed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Lotteries");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Lotteries");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Lotteries.LotteryParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime");

                    b.Property<int>("LotteryId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LotteryParticipants");

                    b.HasIndex("LotteryId")
                        .HasName("IX_LotteryId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("LotteryParticipants");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Modules");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ModuleOrganization", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnName("Module_Id");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("Organization_Id");

                    b.HasKey("ModuleId", "OrganizationId")
                        .HasName("PK_dbo.ModuleOrganizations");

                    b.HasIndex("ModuleId")
                        .HasName("IX_Module_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_Organization_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ModuleOrganizations");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("MessageBody");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Comments");

                    b.HasIndex("AuthorId")
                        .HasName("IX_AuthorId");

                    b.HasIndex("PostId")
                        .HasName("IX_PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<DateTime>("LastEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("MessageBody");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("SharedEventId");

                    b.Property<int>("WallId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Posts");

                    b.HasIndex("AuthorId")
                        .HasName("IX_AuthorId");

                    b.HasIndex("LastActivity")
                        .HasName("IX_LastActivity")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WallId")
                        .HasName("IX_WallId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.PostWatcher", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<string>("UserId");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("PostId")
                        .HasName("IX_PostId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("PostWatchers","dbo");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Access")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("AddForNewUsers")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHiddenFromAllWalls")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Logo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("wall-default.png");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Walls");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Walls");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.WallMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AppNotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("EmailNotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("UserId");

                    b.Property<int>("WallId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.WallMembers");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.HasIndex("WallId")
                        .HasName("IX_WallId");

                    b.HasIndex("IsDeleted", "UserId")
                        .HasName("nci_wi_WallMembers_6C8CE6B55B79BC00FDA53D9B579C2EFA")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("WallMembers");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.WallModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("UserId");

                    b.Property<int>("WallId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.WallModerators");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.HasIndex("WallId")
                        .HasName("IX_WallId");

                    b.ToTable("WallModerators");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<string>("Title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Notifications");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.NotificationUser", b =>
                {
                    b.Property<int>("NotificationId");

                    b.Property<string>("UserId");

                    b.Property<bool>("IsAlreadySeen");

                    b.HasKey("NotificationId", "UserId")
                        .HasName("PK_dbo.NotificationUsers");

                    b.HasIndex("IsAlreadySeen")
                        .HasName("ix_notification_IsAlreadySeen")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NotificationId")
                        .HasName("IX_NotificationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.NotificationsSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUser_Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("CreatedLotteryEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("EventWeeklyReminderAppNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("EventWeeklyReminderEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("EventsAppNotifications");

                    b.Property<bool>("EventsEmailNotifications");

                    b.Property<bool>("FollowingPostsAppNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("FollowingPostsEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("MentionEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool>("MyPostsAppNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("MyPostsEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("ProjectsAppNotifications");

                    b.Property<bool>("ProjectsEmailNotifications");

                    b.HasKey("Id")
                        .HasName("PK_dbo.NotificationsSettings");

                    b.HasIndex("ApplicationUser_Id")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId");

                    b.ToTable("NotificationsSettings");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Offices");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationProviders");

                    b.Property<string>("BookAppAuthorizationGuid");

                    b.Property<string>("CalendarId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CultureCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("en-US");

                    b.Property<bool>("HasRestrictedAccess")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("HostName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("KudosYearlyMultipliers");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("RequiresUserConfirmation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("FLE Standard Time");

                    b.Property<string>("WelcomeEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasDefaultValue("<p style=\"text - align:center; font - size:14px; font - weight:400; margin: 0 0 0 0; \">Administrator has confirmed your registration</p>");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Organizations");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("ParentPageId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Pages");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ParentPageId")
                        .HasName("IX_ParentPageId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<string>("Scope");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Permissions");

                    b.HasIndex("ModuleId")
                        .HasName("IX_ModuleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<int?>("Height");

                    b.Property<byte[]>("ImageData");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MimeType");

                    b.Property<byte[]>("MiniThumbData");

                    b.Property<int?>("MiniThumbHeight");

                    b.Property<int?>("MiniThumbWidth");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("ThumbData");

                    b.Property<int?>("ThumbHeight");

                    b.Property<int?>("ThumbWidth");

                    b.Property<int?>("Width");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Pictures");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Desc");

                    b.Property<string>("Logo");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<int>("WallId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Projects");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OwnerId")
                        .HasName("IX_OwnerId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WallId")
                        .HasName("IX_WallId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.ProjectApplicationUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("Project_Id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("ApplicationUser_Id");

                    b.HasKey("ProjectId", "ApplicationUserId")
                        .HasName("PK_dbo.ProjectApplicationUsers");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProjectId")
                        .HasName("IX_Project_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ProjectApplicationUsers");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.ProjectSkill", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnName("Project_Id");

                    b.Property<int>("SkillId")
                        .HasColumnName("Skill_Id");

                    b.HasKey("ProjectId", "SkillId")
                        .HasName("PK_dbo.ProjectSkills");

                    b.HasIndex("ProjectId")
                        .HasName("IX_Project_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SkillId")
                        .HasName("IX_Skill_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.QualificationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id")
                        .HasName("PK_dbo.QualificationLevels");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("QualificationLevels");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("ProtectedTicket")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("Id")
                        .HasName("PK_dbo.RefreshTokens");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Subject")
                        .IsUnique()
                        .HasName("IX_Subject")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnName("PermissionId");

                    b.Property<string>("RoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("PK_dbo.RolePermissions");

                    b.HasIndex("PermissionId")
                        .HasName("IX_PermissionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coordinates");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<int?>("FloorId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("RoomTypeId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Rooms");

                    b.HasIndex("FloorId")
                        .HasName("IX_FloorId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoomTypeId")
                        .HasName("IX_RoomTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(7);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IconId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsWorkingRoom")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RoomTypes");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("EmployeeId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<int?>("KudosAmmount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KudosShopItemId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceRequests");

                    b.HasIndex("EmployeeId")
                        .HasName("IX_EmployeeId");

                    b.HasIndex("KudosShopItemId")
                        .HasName("IX_KudosShopItemId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PriorityId")
                        .HasName("IX_PriorityId");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceRequestCategories");

                    b.ToTable("ServiceRequestCategories");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestCategoryApplicationUser", b =>
                {
                    b.Property<int>("ServiceRequestCategoryId")
                        .HasColumnName("ServiceRequestCategory_Id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("ApplicationUser_Id");

                    b.HasKey("ServiceRequestCategoryId", "ApplicationUserId")
                        .HasName("PK_dbo.ServiceRequestCategoryApplicationUsers");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUser_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ServiceRequestCategoryId")
                        .HasName("IX_ServiceRequestCategory_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ServiceRequestCategoryApplicationUsers");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("ServiceRequestId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceRequestComments");

                    b.HasIndex("EmployeeId")
                        .HasName("IX_EmployeeId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ServiceRequestId")
                        .HasName("IX_ServiceRequestId");

                    b.ToTable("ServiceRequestComments");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceRequestPriorities");

                    b.ToTable("ServiceRequestPriorities");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceRequestStatuses");

                    b.ToTable("ServiceRequestStatuses");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool>("ShowInAutoComplete")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Skills");

                    b.HasIndex("Title")
                        .HasName("IX_Title")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.SyncToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Token");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SyncTokens");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SyncTokens");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Users.ApplicationUserExam", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ExamId");

                    b.HasKey("ApplicationUserId", "ExamId")
                        .HasName("PK_dbo.ApplicationUserExams");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ExamId")
                        .HasName("IX_ExamId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ApplicationUserExams");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Users.ApplicationUserSkill", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("SkillId");

                    b.HasKey("ApplicationUserId", "SkillId")
                        .HasName("PK_dbo.ApplicationUserSkills");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SkillId")
                        .HasName("IX_SkillId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ApplicationUserSkills");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.VacationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.VacationPages");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("VacationPages");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<TimeSpan?>("EndTime");

                    b.Property<bool>("FullTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<TimeSpan?>("LunchEnd");

                    b.Property<TimeSpan?>("LunchStart");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("PartTimeHours");

                    b.Property<TimeSpan?>("StartTime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.WorkingHours");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Certificate", b =>
                {
                    b.HasBaseType("Shrooms.DataLayer.EntityModels.Models.AbstractClassifier");

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("InProgress");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId");

                    b.HasDiscriminator().HasValue("Certificate");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Language", b =>
                {
                    b.HasBaseType("Shrooms.DataLayer.EntityModels.Models.AbstractClassifier");

                    b.HasDiscriminator().HasValue("Language");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetRoleClaims_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserTokens_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.AbstractClassifier", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Projects_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.AbstractClassifier", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.Classificators_dbo.Classificators_ParentId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ApplicationRole", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.AspNetRoles_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.JobPosition", "JobPosition")
                        .WithMany("Users")
                        .HasForeignKey("JobPositionId")
                        .HasConstraintName("FK_dbo.AspNetUsers_dbo.JobPosition_JobPositionId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Manager")
                        .WithMany("ManagedUsers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_dbo.AspNetUsers_dbo.AspNetUsers_ManagerId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.AspNetUsers_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.QualificationLevel", "QualificationLevel")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("QualificationLevelId")
                        .HasConstraintName("FK_dbo.AspNetUsers_dbo.QualificationLevels_QualificationLevelId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Room", "Room")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_dbo.AspNetUsers_dbo.Rooms_RoomId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.WorkingHours", "WorkingHours")
                        .WithMany()
                        .HasForeignKey("WorkingHoursId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeCategoryKudosType", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeCategory", "BadgeCategory")
                        .WithMany("RelationshipsWithKudosTypes")
                        .HasForeignKey("BadgeCategoryId")
                        .HasConstraintName("FK_dbo.BadgeCategoryKudosType_dbo.BadgeCategories_BadgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosType", "KudosType")
                        .WithMany()
                        .HasForeignKey("KudosTypeId")
                        .HasConstraintName("FK_dbo.BadgeCategoryKudosType_dbo.KudosTypes_KudosTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeLog", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser")
                        .WithMany("BadgeLogs")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeType", "BadgeType")
                        .WithMany()
                        .HasForeignKey("BadgeTypeId")
                        .HasConstraintName("FK_dbo.BadgeLogs_dbo.BadgeTypes_BadgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_dbo.BadgeLogs_dbo.AspNetUsers_EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.BadgeLogs_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeType", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Badges.BadgeCategory", "BadgeCategory")
                        .WithMany("BadgeTypes")
                        .HasForeignKey("BadgeCategoryId")
                        .HasConstraintName("FK_dbo.BadgeTypes_dbo.BadgeCategories_BadgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.BlacklistUser", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_dbo.BlacklistUsers_dbo.AspNetUsers_CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_dbo.BlacklistUsers_dbo.AspNetUsers_ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.BlacklistUsers_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany("BlacklistEntries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.BlacklistUsers_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.Book", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Books")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.Books_dbo.AspNetUsers_ApplicationUserId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Books_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.BookLog", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("BookLogs")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.BookLogs_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Books.BookOffice", "BookOffice")
                        .WithMany("BookLogs")
                        .HasForeignKey("BookOfficeId")
                        .HasConstraintName("FK_dbo.BookLogs_dbo.BookOffice_BookOfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.BookLogs_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Books.BookOffice", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Books.Book", "Book")
                        .WithMany("BookOffices")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_dbo.BookOffice_dbo.Books_BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_dbo.BookOffice_dbo.Offices_OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Office")
                        .WithMany("BookOffices")
                        .HasForeignKey("OfficeId1");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.BookOffice_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Committees_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteeSuggestion", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.Committee")
                        .WithMany("Suggestions")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_dbo.CommitteeSuggestion_dbo.Committees_CommitteeId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .HasConstraintName("FK_dbo.CommitteeSuggestions_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteeSuggestionID", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", "Committee")
                        .WithMany("CommitteeSuggestionIds")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_dbo.CommitteeSuggestionsIDs_dbo.Committees_Committees_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteeSuggestion", "CommitteeSuggestion")
                        .WithMany("CommitteeSuggestionIds")
                        .HasForeignKey("CommitteeSuggestionId")
                        .HasConstraintName("FK_dbo.CommitteeSuggestionsIDs_dbo.CommitteeSuggestions_CommitteeSuggestions_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserDelegates", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("CommitteesUserDelegates")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.CommitteesUsersDelegates_dbo.AspNetUsers_ApplicationUser_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", "Committee")
                        .WithMany("CommitteesUserDelegates")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_dbo.CommitteesUsersDelegates_dbo.Committees_Committee_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserLeadership", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("CommitteesUserLeadership")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.CommitteesUsersLeadership_dbo.AspNetUsers_ApplicationUser_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", "Committee")
                        .WithMany("CommitteesUserLeadership")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_dbo.CommitteesUsersLeadership_dbo.Committees_Committee_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Committees.CommitteesUserMembership", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("CommitteesUserMembership")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.CommitteeApplicationUsers_dbo.AspNetUsers_ApplicationUser_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Committees.Committee", "Committee")
                        .WithMany("CommitteesUserMembership")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("FK_dbo.CommitteeApplicationUsers_dbo.Committees_Committee_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.Event", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Events.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("FK_dbo.Events_dbo.EventTypes_EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_dbo.Events_dbo.Offices_OfficeId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Events_dbo.Organizations_OrganizationId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ResponsibleUser")
                        .WithMany("Events")
                        .HasForeignKey("ResponsibleUserId")
                        .HasConstraintName("FK_dbo.Events_dbo.AspNetUsers_ResponsibleUserId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", "Wall")
                        .WithMany()
                        .HasForeignKey("WallId")
                        .HasConstraintName("FK_dbo.Events_dbo.Walls_WallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventOption", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Events.Event", "Event")
                        .WithMany("EventOptions")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EventOptions_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventParticipant", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.EventParticipants_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Events.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EventsParticipants_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventParticipantEventOption", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Events.EventOption", "EventOption")
                        .WithMany("EventParticipantEventOptions")
                        .HasForeignKey("EventOptionId")
                        .HasConstraintName("FK_dbo.EventParticipantEventOptions_dbo.EventOptions_EventOption_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Events.EventParticipant", "EventParticipant")
                        .WithMany("EventParticipantEventOptions")
                        .HasForeignKey("EventParticipantId")
                        .HasConstraintName("FK_dbo.EventParticipantEventOptions_dbo.EventParticipants_EventParticipant_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Events.EventType", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.EventTypes_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Exam", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Exams_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ExamCertificate", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Certificate", "Certificate")
                        .WithMany("ExamCertificates")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_dbo.ExamCertificates_dbo.AbstractClassifiers_Certificate_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Exam", "Exam")
                        .WithMany("ExamCertificates")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_dbo.ExamCertificates_dbo.Exams_Exam_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ExternalLink", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ExternalLinks_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.FilterPreset", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.FilterPresets_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Floor", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Office", "Office")
                        .WithMany("Floors")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_dbo.Floors_dbo.Offices_OfficeId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Floors_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("Picture_Id")
                        .HasConstraintName("FK_dbo.Floors_dbo.Pictures_Picture_Id");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.JobPosition", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.JobPosition_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosLog", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_dbo.KudosLogs_dbo.AspNetUsers_EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.KudosBasket", "KudosBasket")
                        .WithMany("KudosLogs")
                        .HasForeignKey("KudosBasketId")
                        .HasConstraintName("FK_dbo.KudosLogs_dbo.KudosBaskets_KudosBasketId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.KudosLogs_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosShopItem", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.KudosShopItems_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.KudosBasket", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.KudosBaskets_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Lotteries.Lottery", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Lotteries_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "Images", b1 =>
                        {
                            b1.Property<int>("LotteryId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .HasColumnName("Images");

                            b1.HasKey("LotteryId");

                            b1.ToTable("Lotteries");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Lotteries.Lottery")
                                .WithOne("Images")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "LotteryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Lotteries.LotteryParticipant", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Lotteries.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .HasConstraintName("FK_dbo.LotteryParticipants_dbo.Lotteries_LotteryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.LotteryParticipants_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ModuleOrganization", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Module", "Module")
                        .WithMany("ShroomsModuleOrganizations")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_dbo.ShroomsModuleOrganizations_dbo.ShroomsModules_ShroomsModule_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany("ShroomsModuleOrganizations")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ShroomsModuleOrganizations_dbo.Organizations_Organization_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Comment", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_dbo.Comments_dbo.AspNetUsers_ApplicationUserId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Posts_PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "Images", b1 =>
                        {
                            b1.Property<int>("CommentId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .HasColumnName("Images");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comments");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Comment")
                                .WithOne("Images")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "CommentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.LikesCollection", "Likes", b1 =>
                        {
                            b1.Property<int>("CommentId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("Likes")
                                .HasDefaultValue("{}");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comments");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Comment")
                                .WithOne("Likes")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.Multiwalls.LikesCollection", "CommentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_dbo.Posts_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", "Wall")
                        .WithMany("Posts")
                        .HasForeignKey("WallId")
                        .HasConstraintName("FK_dbo.Posts_dbo.Walls_WallId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "Images", b1 =>
                        {
                            b1.Property<int>("PostId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .HasColumnName("Images");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post")
                                .WithOne("Images")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.ImageCollection", "PostId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.LikesCollection", "Likes", b1 =>
                        {
                            b1.Property<int>("PostId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("Likes")
                                .HasDefaultValue("{}");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post")
                                .WithOne("Likes")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.Multiwalls.LikesCollection", "PostId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.PostWatcher", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.PostWatchers_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Walls_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.WallMember", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany("WallUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.WallUsers_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", "Wall")
                        .WithMany("Members")
                        .HasForeignKey("WallId")
                        .HasConstraintName("FK_dbo.WallMembers_dbo.Walls_WallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Multiwalls.WallModerator", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.WallModerators_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", "Wall")
                        .WithMany("Moderators")
                        .HasForeignKey("WallId")
                        .HasConstraintName("FK_dbo.WallModerators_dbo.Walls_WallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.Notification", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Notifications_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.Notifications.Sources", "Sources", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Serialized")
                                .HasColumnName("Sources");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Notifications.Notification")
                                .WithOne("Sources")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.Notifications.Sources", "NotificationId")
                                .HasConstraintName("FK_dbo.Notifications_dbo.Sources_SourcesTempId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.NotificationUser", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Notifications.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_dbo.NotificationUser_dbo.Notifications_NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.NotificationUsers_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Notifications.NotificationsSettings", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("NotificationsSettings")
                        .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.Notifications.NotificationsSettings", "ApplicationUser_Id")
                        .HasConstraintName("FK_dbo.NotificationsSettings_dbo.AspNetUsers_ApplicationUser_Id");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.NotificationsSettings_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Office", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Offices_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Shrooms.DataLayer.EntityModels.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OfficeId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Building");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("Street");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Offices");

                            b1.HasOne("Shrooms.DataLayer.EntityModels.Models.Office")
                                .WithOne("Address")
                                .HasForeignKey("Shrooms.DataLayer.EntityModels.Models.Address", "OfficeId")
                                .HasConstraintName("FK_dbo.Offices_dbo.Address_AddressTempId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Page", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Pages_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Page", "ParentPage")
                        .WithMany()
                        .HasForeignKey("ParentPageId")
                        .HasConstraintName("FK_dbo.Pages_dbo.Pages_ParentPageId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Permission", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_dbo.Permissions_dbo.ShroomsModules_ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Picture", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Pictures_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.Project", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Org_Projects")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_dbo.Projects_dbo.AspNetUsers_OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Multiwalls.Wall", "Wall")
                        .WithMany()
                        .HasForeignKey("WallId")
                        .HasConstraintName("FK_dbo.Projects_dbo.Walls_WallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.ProjectApplicationUser", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ProjectApplicationUsers")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.Project2ApplicationUser_dbo.AspNetUsers_ApplicationUser_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Projects.Project", "Project")
                        .WithMany("ProjectApplicationUsers")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_dbo.Project2ApplicationUser_dbo.Projects_Project2_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Projects.ProjectSkill", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Projects.Project", "Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_dbo.Project2Skill_dbo.Projects_Project2_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Skill", "Skill")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_dbo.Project2Skill_dbo.Skills_Skill_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.QualificationLevel", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.QualificationLevels_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RefreshToken", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.RefreshTokens_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RolePermission", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_dbo.RolePermissions_dbo.Permissions_PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.RolePermissions_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Room", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.Floors_FloorId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.RoomTypes_RoomTypeId");
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.RoomType", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.RoomTypes_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequest", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_dbo.ServiceRequests_dbo.AspNetUsers_EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Kudos.KudosShopItem", "KudosShopItem")
                        .WithMany()
                        .HasForeignKey("KudosShopItemId")
                        .HasConstraintName("FK_dbo.ServiceRequests_dbo.KudosShopItems_KudosShopItemId");

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ServiceRequests_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_dbo.ServiceRequests_dbo.ServiceRequestPriorities_PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_dbo.ServiceRequests_dbo.ServiceRequestStatuses_StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestCategoryApplicationUser", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ServiceRequestCategoryApplicationUsers")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.ServiceRequestCategoryApplicationUsers_dbo.AspNetUsers_ApplicationUser_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestCategory", "ServiceRequestCategory")
                        .WithMany("ServiceRequestCategoryApplicationUsers")
                        .HasForeignKey("ServiceRequestCategoryId")
                        .HasConstraintName("FK_dbo.ServiceRequestCategoryApplicationUsers_dbo.ServiceRequestCategories_ServiceRequestCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequestComment", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_dbo.ServiceRequestComments_dbo.AspNetUsers_EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ServiceRequestComments_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ServiceRequests.ServiceRequest", "ServiceRequest")
                        .WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_dbo.ServiceRequestComments_dbo.ServiceRequests_ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.SyncToken", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.SyncTokens_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Users.ApplicationUserExam", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserExams")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.ApplicationUserExams_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Exam", "Exam")
                        .WithMany("ApplicationUserExams")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_dbo.ApplicationUserExams_dbo.Exams_ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Users.ApplicationUserSkill", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserSkills")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.ApplicationUserSkills_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Skill", "Skill")
                        .WithMany("ApplicationUserSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_dbo.ApplicationUserSkills_dbo.Skills_SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.VacationPage", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.VacationPages_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.WorkingHours", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.WorkingHours_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.WorkingHours_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shrooms.DataLayer.EntityModels.Models.Certificate", b =>
                {
                    b.HasOne("Shrooms.DataLayer.EntityModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Certificates")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.Classificators_dbo.AspNetUsers_ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
