// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemporaryDataLayer;

namespace TemporaryDataLayer.Migrations
{
    [DbContext(typeof(TempShroomsDbContext))]
    [Migration("20220916085435_AddBook")]
    partial class AddBook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.RoleClaims");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.UserClaims");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TemporaryDataLayer.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("AbsentComment");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bio");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CultureCode");

                    b.Property<TimeSpan?>("DailyMailingHour");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("EmploymentDate");

                    b.Property<string>("FacebookEmail");

                    b.Property<string>("FirstName");

                    b.Property<string>("GoogleEmail");

                    b.Property<bool>("IsAbsent");

                    b.Property<bool>("IsAnonymized");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManagingDirector");

                    b.Property<bool>("IsOwner");

                    b.Property<bool>("IsTutorialComplete");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ManagerId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureId");

                    b.Property<decimal>("RemainingKudos");

                    b.Property<int?>("RoomId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("SittingPlacesChanged");

                    b.Property<decimal>("SpentKudos");

                    b.Property<string>("TimeZone");

                    b.Property<decimal>("TotalKudos");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime?>("VacationLastTimeUpdated");

                    b.Property<double?>("VacationTotalTime");

                    b.Property<double?>("VacationUnusedTime");

                    b.Property<double?>("VacationUsedTime");

                    b.Property<int?>("WorkingHoursId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ApplicationUser");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoomId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TemporaryDataLayer.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("BookCoverUrl");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasMaxLength(9000);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Url")
                        .HasMaxLength(2000);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Books");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Books");
                });

            modelBuilder.Entity("TemporaryDataLayer.BookLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("Returned")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TakenFrom")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.BookLogs");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("BookLogs");
                });

            modelBuilder.Entity("TemporaryDataLayer.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.ExternalLinks");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("TemporaryDataLayer.FilterPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("ForPage");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Preset")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_dbo.FilterPresets");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("FilterPresets");
                });

            modelBuilder.Entity("TemporaryDataLayer.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int?>("OfficeId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PictureId");

                    b.Property<int?>("Picture_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Floors");

                    b.HasIndex("OfficeId")
                        .HasName("IX_OfficeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Picture_Id")
                        .HasName("IX_Picture_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("TemporaryDataLayer.Models.ModuleOrganization", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnName("Module_Id");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("Organization_Id");

                    b.HasKey("ModuleId", "OrganizationId")
                        .HasName("PK_dbo.ModuleOrganizations");

                    b.HasIndex("ModuleId")
                        .HasName("IX_Module_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_Organization_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ModuleOrganizations");
                });

            modelBuilder.Entity("TemporaryDataLayer.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Modules");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("TemporaryDataLayer.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Offices");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TemporaryDataLayer.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthenticationProviders");

                    b.Property<string>("BookAppAuthorizationGuid");

                    b.Property<string>("CalendarId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CultureCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("en-US");

                    b.Property<bool>("HasRestrictedAccess")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("HostName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("KudosYearlyMultipliers");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("RequiresUserConfirmation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("FLE Standard Time");

                    b.Property<string>("WelcomeEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasDefaultValue("<p style=\"text - align:center; font - size:14px; font - weight:400; margin: 0 0 0 0; \">Administrator has confirmed your registration</p>");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Organizations");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TemporaryDataLayer.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<int?>("Height");

                    b.Property<byte[]>("ImageData");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MimeType");

                    b.Property<byte[]>("MiniThumbData");

                    b.Property<int?>("MiniThumbHeight");

                    b.Property<int?>("MiniThumbWidth");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("ThumbData");

                    b.Property<int?>("ThumbHeight");

                    b.Property<int?>("ThumbWidth");

                    b.Property<int?>("Width");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Pictures");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("TemporaryDataLayer.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coordinates");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<int?>("FloorId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("RoomTypeId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Rooms");

                    b.HasIndex("FloorId")
                        .HasName("IX_FloorId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoomTypeId")
                        .HasName("IX_RoomTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TemporaryDataLayer.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(7);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IconId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWorkingRoom")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RoomTypes");

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("TemporaryDataLayer.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy");

                    b.Property<TimeSpan?>("EndTime");

                    b.Property<bool>("FullTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<TimeSpan?>("LunchEnd");

                    b.Property<TimeSpan?>("LunchStart");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("PartTimeHours");

                    b.Property<TimeSpan?>("StartTime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.WorkingHours");

                    b.HasIndex("ApplicationUserId")
                        .HasName("IX_ApplicationUserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrganizationId")
                        .HasName("IX_OrganizationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TemporaryDataLayer.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TemporaryDataLayer.ApplicationUser", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ApplicationUser_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TemporaryDataLayer.Room")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_dbo.ApplicationUser_dbo.Rooms_RoomId");

                    b.HasOne("TemporaryDataLayer.WorkingHours", "WorkingHours")
                        .WithMany()
                        .HasForeignKey("WorkingHoursId");
                });

            modelBuilder.Entity("TemporaryDataLayer.Book", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.Books_dbo.ApplicationUser_ApplicationUserId");

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Books_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.BookLog", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.BookLogs_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.BookLogs_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.ExternalLink", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ExternalLinks_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.FilterPreset", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.FilterPresets_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TemporaryDataLayer.Floor", b =>
                {
                    b.HasOne("TemporaryDataLayer.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_dbo.Floors_dbo.Offices_OfficeId");

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Floors_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TemporaryDataLayer.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("Picture_Id")
                        .HasConstraintName("FK_dbo.Floors_dbo.Pictures_Picture_Id");
                });

            modelBuilder.Entity("TemporaryDataLayer.Models.ModuleOrganization", b =>
                {
                    b.HasOne("TemporaryDataLayer.Module", "Module")
                        .WithMany("ShroomsModuleOrganizations")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_dbo.ShroomsModuleOrganizations_dbo.ShroomsModules_ShroomsModule_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany("ShroomsModuleOrganizations")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.ShroomsModuleOrganizations_dbo.Organizations_Organization_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TemporaryDataLayer.Office", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Offices_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.Picture", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Pictures_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.Room", b =>
                {
                    b.HasOne("TemporaryDataLayer.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.Floors_FloorId");

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TemporaryDataLayer.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_dbo.Rooms_dbo.RoomTypes_RoomTypeId");
                });

            modelBuilder.Entity("TemporaryDataLayer.RoomType", b =>
                {
                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.RoomTypes_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TemporaryDataLayer.WorkingHours", b =>
                {
                    b.HasOne("TemporaryDataLayer.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_dbo.WorkingHours_dbo.AspNetUsers_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TemporaryDataLayer.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_dbo.WorkingHours_dbo.Organizations_OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
